//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;

namespace BookShop.Services.EntityModels
{
	[Flags]
	public enum MemoryRepositoryFailMode
    {
        None = 0,

        Get = 1,

        Save = 2,

        Add = 4,

        Remove = 8,

        All = Get | Save | Add | Remove
    }

	[ExcludeFromCodeCoverage]
	[System.CodeDom.Compiler.GeneratedCode("UnitOfWorkGenerator", "1.0.0.0")]
    public partial class MemoryRepository<E> : IRepository<E> where E : class
    {
		public bool IsSaved { get; set; }

		public MemoryRepositoryFailMode FailMode { get; set; }

        protected readonly List<E> ObjectSet;

		protected readonly List<E> tempAddObjectSet;

        protected readonly List<E> tempRemoveObjectSet;

        protected readonly List<PropertyInfo> PrimaryProperties;

		private readonly Type currentType;

		private int identityNumber = 1;
        
        public MemoryRepository(string defaultKeyNames = "Id")
        {
            Contract.Requires(defaultKeyNames != null, "defaultKeyNames cannot be null or empty.");

            this.ObjectSet = new List<E>();
			this.tempAddObjectSet = new List<E>();
            this.tempRemoveObjectSet = new List<E>();
            this.PrimaryProperties = new List<PropertyInfo>();
			this.FailMode = MemoryRepositoryFailMode.None;
			this.currentType = typeof(E);

            InitializePrimaryKey(defaultKeyNames);
        }

        private void InitializePrimaryKey(string defaultKeyNames)
        {
            string[] primaryKeyNames = defaultKeyNames.Split(',');
            
            foreach (string curKeyName in primaryKeyNames)
            {
                var curProperty = this.currentType.GetProperty(curKeyName.Trim());

                if (curProperty != null)
                {
                    this.PrimaryProperties.Add(curProperty);
                }
            }

            if (this.PrimaryProperties.Count == 0)
            {
                foreach (var name in Regex.Replace(this.currentType.Name, "(\\B[A-Z])", " $1").Split(' '))
                {
                    var curProperty = this.currentType.GetProperty(name + "Id");

                    if (curProperty != null)
                    {
                        this.PrimaryProperties.Add(curProperty);
                        break;
                    }
                }
            }
        }

		private void ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode mode)
        {
            if ((this.FailMode & mode) == mode)
            {
                throw new Exception();
            }
        }

		private void ValidateEntity(E entity)
        {
            // The property that we can read and write.
            var properties = this.currentType.GetProperties()
                                             .Where(prop => prop.CanRead && prop.CanWrite);

            foreach (var curProperty in properties)
            {
                if (curProperty.PropertyType == typeof(string) &&
                    curProperty.GetCustomAttributes(typeof(NullableAttribute), true).Length == 0 &&
                    curProperty.GetValue(entity, null) == null)
                {
                    throw new NullReferenceException(curProperty.Name);
                }

                if (curProperty.PropertyType == typeof(DateTime) &&
                    curProperty.GetValue(entity, null).Equals(DateTime.MinValue))
                {
                    throw new NullReferenceException(curProperty.Name);
                }
            }
        }

		[ContractInvariantMethod]
		private void ObjectInvariant() 
		{
			Contract.Invariant(this.ObjectSet != null);
			Contract.Invariant(this.PrimaryProperties != null);
		}

        public virtual IQueryable<E> Table
        {
			get
			{
				ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Get);

				return this.ObjectSet.AsQueryable();
			}
        }        

        public virtual void Add(E entity)
        {
			ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Add);
			
			ValidateEntity(entity);
            SetIdentityNumber(entity);

            this.tempAddObjectSet.Add(entity);
			this.IsSaved = false;
        }

		public virtual void AddEntityForTest(E entity)
        {
			Contract.Requires(entity != null, "entity cannot be null.");
			ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Add);
			
			SetIdentityNumber(entity);

			this.ObjectSet.Add(entity);
			this.IsSaved = false;
        }

		public void AddRange(IEnumerable<E> entities)
        {
            Contract.Requires(entities != null, "entities cannot be null.");
			
            foreach (E entity in entities)
            {
                Add(entity);
            }
        }

        public virtual void Remove(E entity)
        {
			ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Remove);

			this.tempRemoveObjectSet.Add(entity);
			this.IsSaved = false;
        }
		
        public virtual int Save()
        {
			ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Save);

            int count = tempAddObjectSet.Count + tempRemoveObjectSet.Count;

            foreach (E entity in this.tempAddObjectSet)
            {
                this.ObjectSet.Add(entity);
            }

            foreach (E entity in this.tempRemoveObjectSet)
            {
                this.ObjectSet.Remove(entity);
            }

            this.tempAddObjectSet.Clear();
			this.tempRemoveObjectSet.Clear();
			this.IsSaved = true;

			return count > 0 ? count : this.ObjectSet.Count;
        }

		public virtual E Find(params object[] keyValues)
		{
            ThrowExceptionIfFailModeOn(MemoryRepositoryFailMode.Get);
            
            if (this.PrimaryProperties.Count != keyValues.Length)
            {
				throw new NotSupportedException();                
            }

            IEnumerable<E> query = this.ObjectSet;

            for (int i = 0; i < keyValues.Length; i++)
            {
                int index = i;
                query = query.Where(item => object.Equals(this.PrimaryProperties[index].GetValue(item, null), keyValues[index]));
            }            

			return query.FirstOrDefault();
		}

		public void Clear()
		{
			this.ObjectSet.Clear();
		}

		private void SetIdentityNumber(E item)
        {
            if (this.PrimaryProperties.Count == 1 && this.PrimaryProperties[0].PropertyType == typeof(int))
            {
                int curIdValue = (int) this.PrimaryProperties[0].GetValue(item, null);

                if (curIdValue > 0)
                {
                    this.identityNumber = Math.Max(curIdValue, this.identityNumber) + 1;
                }
                else
                {
                    this.PrimaryProperties[0].SetValue(item, this.identityNumber, null);
					this.identityNumber++;
                }
            }
        }
	}
}

